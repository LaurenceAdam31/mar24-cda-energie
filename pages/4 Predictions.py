from joblib import load
import pandas as pd
import streamlit as st
import datetime
from utils import import_data as imda
import plotly.express as px
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.arima.model import ARIMA
from matplotlib import pyplot as plt



# CONFIG DE LA PAGE --> AVEC FAVICON
st.set_page_config(page_title="Projet Energie - pr√©dictions", page_icon="üåü", layout="wide")

#  # Dictionnaire des meilleurs mod√®les par r√©gion
# meilleurs_modeles = {
#     "11 - Ile de France": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "24 - Centre-Val de Loire": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "27 - Bourgogne-Franche-Comt√©": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "28 - Normandie": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "32 - Hauts-de-France": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "44 - Grand Est": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "52 - Pays de la Loire": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "53 - Bretagne": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "75 - Nouvelle-Aquitaine": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "76 - Occitanie": ('ARIMA', (1, 0, 1), (2, 0, 0, 12)),
#     "84 - Auvergne-Rh√¥ne-Alpes": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
#     "93 - Provence-Alpes-C√¥te d Azur": ('SARIMAX', (0, 1, 2), (1, 2, 2, 12)),
   
# }
image_paths = {
    '11': 'images/model_region_11.jpg',
    '24': 'images/model_region_24.jpg',
    '27': 'images/model_region_27.jpg',
    '28': 'images/model_region_28.jpg',
    '32': 'images/model_region_32.jpg',
    '44': 'images/model_region_44.jpg',
    '52': 'images/model_region_52.jpg',
    '53': 'images/model_region_53.jpg',
    '75': 'images/model_region_75.jpg',
    '76': 'images/model_region_76.jpg',
    '84': 'images/model_region_84.jpg',
    '93': 'images/model_region_11.jpg',
}


def creer_modele(data, modele_info):
    type_modele, order, seasonal_order = modele_info
    if type_modele == 'SARIMAX':
        model = SARIMAX(data, order=order, seasonal_order=seasonal_order)
    elif type_modele == 'ARIMA':
        model = ARIMA(data, order=order, seasonal_order=seasonal_order)
    results = model.fit()
    return results

# Chargement des DataFrames
df_energie = imda.get_df_energie()  # Charge df_energie depuis CSV
df_group = imda.get_df_group(df_energie.copy())  # Charge df_group depuis CSV


# # Cr√©er un dictionnaire pour stocker les DataFrames par r√©gion
df_par_region = {}
for region, df_region in df_group.groupby("Code INSEE r√©gion"):
    if df_region.index.duplicated().any():
        df_region = df_region[~df_region.index.duplicated(keep='first')]
    df_region = df_region.asfreq('MS')
    df_par_region[region] = df_region


# Listes des codes INSEE et des noms de r√©gions
codes_insee = ['11', '24','27','28','32','44','52','53','75', '76','84','93']
noms_regions = ['Ile de France', 'Centre-Val de Loire', 'Bourgogne-Franche-Comt√©','Normandie','Hauts-de-France','Grand Est','Pays de la Loire','Bretagne','Nouvelle-Aquitaine','Occitanie','Auvergne-Rh√¥ne-Alpes','Provence-Alpes-C√¥te d Azur']

# Concat√©ner le code INSEE et le nom de la r√©gion
regions_concatenees = [f"{code} - {nom}" for code, nom in zip(codes_insee, noms_regions)]

# Chargement du mod√®le
model_national = load('model_national.pkl')

# SIDEBAR A GAUCHE CLASSIQUE
st.sidebar.title("Predictions")
pages = ["Mod√©lisation","Prediction Nationale", "Prediction R√©gionale"]
page = st.sidebar.radio("Aller vers", pages)


# Chargement des DataFrames
conso = imda.get_conso(df_energie)  # Charge conso depuis CSV

# Appel de la fonction pour appliquer les styles
imda.apply_styles()


# Titre principal avec grande taille de police, align√© √† gauche
st.markdown('<p class="big-font">üìà Pr√©dictions</p>', unsafe_allow_html=True)


# SWITCH SUR LA PAGE DE MOD√âLISATION
if page == "Mod√©lisation":
    st.markdown('<p class="medium-font"><b>Choix des mod√®les utilis√©s pour les pr√©dictions</b></p>', unsafe_allow_html=True)

    st.markdown('<p class="small-font">Plusieurs mod√®les de pr√©vision peuvent √™tre utilis√©s. Nous avons tout d\'abord choisi d\'essayer des mod√®les simples:', unsafe_allow_html=True)

    st.markdown("""
        <ul>
            <li class="small-font">Mod√®le de r√©gression lin√©aire : trop simple.</li>
            <li class="small-font">Mod√®le ARIMA/SARIMA, essai de diff√©rents param√®tres au niveau national et r√©gional:</li>
        </ul>
        """, unsafe_allow_html=True)
  
    
    with st.expander("Essais au niveau national"):
        st.write("&nbsp;&nbsp;&nbsp;&nbsp; Boucle pour trouver les meilleurs param√®tres, bas√©s sur le BIC")
        st.write("&nbsp;&nbsp;&nbsp;&nbsp; Mod√®le auto les meilleurs param√®tres, bas√©s sur le AIC")
    
    with st.expander("Essais au niveau r√©gional"):
        st.write("&nbsp;&nbsp;&nbsp;&nbsp; Application des meilleurs param√®tres trouv√©s au niveau national :  order=(0,1,2), seasonal_order=(1, 2, 2, 12)")
        st.write("&nbsp;&nbsp;&nbsp;&nbsp; Mod√®le auto pour trouv√©s les meilleurs param√®tres par r√©gion, entrain√© sur l'ensemble des donn√©es")
        st.write("&nbsp;&nbsp;&nbsp;&nbsp; Mod√®le auto pour trouv√©s les meilleurs param√®tres par r√©gion, entrain√© sur ensemble train/test")

    st.markdown('<p class="small-font">Les mod√®les SARIMA se sont r√©v√©l√©s les plus adapt√©s √† la forte variation saisonni√®re de la consommation d\'√©nergie.</p>', unsafe_allow_html=True)

    st.markdown('<p class="small-font">Nous avons aussi proc√©d√© √† une transformation logarithmique pour √©tudier la tendance d\'√©volution de la consommation corrig√©e des variations saisonni√®res. La visualisation des r√©sidus nous permet de visualiser les √©v√®nements ayant impact√© la consommation d\'√©nergie, comme le confinement en 2020.</p>', unsafe_allow_html=True)

    # Appel de la fonction dans la page de mod√©lisation
    x_cvs, mult = imda.preprocess_data(conso)

    # Graphiques
    st.markdown("### S√©rie originale et s√©rie corrig√©e des variations saisonni√®res")
    with st.expander("Afficher/Masquer la s√©rie originale et la s√©rie corrig√©e"):
        fig, ax = plt.subplots(figsize=(8, 4))

        # S√©rie originale
        ax.plot(conso.index, conso['Consommation (MW)'], label='S√©rie originale', color='blue')

        # S√©rie corrig√©e
        ax.plot(conso.index, x_cvs, label='S√©rie corrig√©e', color='red', linestyle='--')

        ax.set_title('S√©rie originale et s√©rie corrig√©e des variations saisonni√®res')
        ax.set_xlabel('Date')
        ax.set_ylabel('Consommation (MW)')

        ax.legend(loc='upper left')
        ax.grid(True)

        st.pyplot(fig)

    # Cr√©er un expander pour la d√©composition saisonni√®re
    st.markdown("### D√©composition de la s√©rie")
    with st.expander("Afficher/Masquer la d√©composition saisonni√®re"):
        fig2, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(8, 6), sharex=True)

        # Composantes de la d√©composition
        ax1.plot(conso.index, np.log(conso['Consommation (MW)']), label='Log(Consommation)', color='blue')
        ax1.set_title('S√©rie Log(Consommation)')

        ax2.plot(conso.index, mult.trend, label='Tendance', color='green')
        ax2.set_title('Tendance')

        ax3.plot(conso.index, mult.seasonal, label='Saisonnalit√©', color='orange')
        ax3.set_title('Saisonnalit√©')

        ax4.plot(conso.index, mult.resid, label='R√©sidus', color='purple')
        ax4.set_title('R√©sidus')

        for ax in [ax1, ax2, ax3, ax4]:
            ax.legend(loc='upper left')
            ax.grid(True)

        st.pyplot(fig2)

# SWITCH SUR LA PAGE DE PREDICTION
if page == "Mod√®les":
    st.markdown('<p class="small-font"><b>Mod√®les utilis√©s pour la pr√©diction</b></p>', unsafe_allow_html=True)
    st.write('Plusieurs mod√®les de pr√©visions peuvent √™re utilis√©s : des mod√®les simples et rapides, et des mod√®les plus complexes')
    st.write('<b>Mod√®les simples</b>',' : Mod√®le de r√©gression lin√©aire - Mod√®les ARIMA/SARIMA', unsafe_allow_html=True)
    st.write("Essais au niveau national")
    st.markdown("""
- Boucle pour trouver les meilleurs param√®tres, bas√© sur le BIC
- Mod√®le automatique (auto arima), qui trouve les meilleurs param√®tres bas√©s sur l'AIC
""")
    st.write("Essais au niveau r√©gional")
    st.markdown("""
- Mod√®le (boucle) avec les meilleurs param√®tres trouv√©s pour le niveau national :  Les meilleurs param√®tres identifi√©s par la fonction sont order=(0,1,2), seasonal_order=(1, 2, 2, 12)
- Mod√®le automatique pour trouver les meilleurs param√®tres par r√©gion, entrain√© sur l'ensemble des donn√©es
- Mod√®le automatique pour trouver les meilleurs param√®tres par r√©gion, entrain√© sur un ensemble train/test
""")
             
    
if page == "Prediction Nationale":
    st.markdown('<p class="medium-font"><b>Pr√©dictions de la consommation √©lectrique nationale</b></p>', unsafe_allow_html=True)

    # Cr√©ation de colonnes pour les entr√©es de dates
    col1, col2 = st.columns(2)
 
    # Saisie des dates de d√©but et de fin
    d = col1.date_input('Date d√©but', datetime.date.today())
    f = col2.date_input('Date fin', datetime.date(datetime.datetime.now().year + 1, 9, 1))

    # Faire la pr√©diction en fonction des dates saisies
    if d >= datetime.date(2021, 1, 1):
        prediction = model_national.get_prediction(start=d, end=f)
    else:
        prediction = model_national.get_prediction(start=pd.to_datetime('2021-01-01'), end=f)

    predicted_consumption = prediction.predicted_mean
    pred_ci = prediction.conf_int()

   

    # Cr√©ation du DataFrame pour les pr√©dictions
    pred = pd.DataFrame({
        'PERIODE': predicted_consumption.index,
        'Consommation (MW)': predicted_consumption.values
    })

    start_date = '2021-01-01'

    # Visualisation
    plt.figure(figsize=(15, 8))
    if d < datetime.date(2024, 9, 1):
        filtered_conso = conso[(conso.index > pd.to_datetime(d))]
        plt.plot(filtered_conso, label='Donn√©es r√©elles')
    plt.plot(predicted_consumption, color="orange", label='Pr√©dictions')
    plt.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color='grey', alpha=0.2, label='Intervalle de confiance')
    if d <= datetime.date(2021, 1, 1):
        plt.axvline(x=pd.to_datetime(start_date), color='red', linestyle='--', label='Date de d√©but des pr√©dictions')
    plt.legend()
    plt.grid(True)
    plt.title(f'Pr√©dictions de la consommation √©lectrique (MW) nationale')
    st.pyplot(plt)

    predicted_consumption = predicted_consumption.to_frame()
    predicted_consumption = predicted_consumption.rename(columns = {'predicted_mean' : 'Consommation (MW)'})
    
    if d < datetime.date(2021, 1, 1):
        res = pd.concat([filtered_conso, predicted_consumption[predicted_consumption.index > pd.to_datetime('2024-09-01')]])
    else:
        res = predicted_consumption[predicted_consumption.index > pd.to_datetime('2024-09-01')]
         
    res = pd.concat([res, pred_ci], axis = 1)

    st.dataframe(res)

    
elif page == "Prediction R√©gionale":

    
    # Interface Streamlit
    st.markdown('<p class="medium-font"><b>Pr√©dictions de la consommation √©lectrique par r√©gion</b></p>', unsafe_allow_html=True)

    # Cr√©ation de colonnes pour les entr√©es de dates
    col1, col2 = st.columns(2)

    # Saisie des dates de d√©but et de fin
    d = col1.date_input('Date d√©but', datetime.date.today())
    f = col2.date_input('Date fin', datetime.date(datetime.datetime.now().year + 1, 9, 1))

    # S√©lection de la r√©gion
    region_selection = st.selectbox('S√©lectionnez une r√©gion', regions_concatenees)

    # Afficher les pr√©dictions pour la r√©gion s√©lectionn√©e
    if region_selection:
        region_code = region_selection.split(' - ')[0]
        df_region = df_par_region[int(region_code)].drop(columns=['Code INSEE r√©gion'])
        # modele_info = meilleurs_modeles.get(region_selection)
        
        model_regional = load(f'model_region_{region_code}.pkl')
        
        
        if model_regional:

            start_date = '2021-01-01'
            end_date = '2024-12-01'
            # Faire la pr√©diction en fonction des dates saisies
            if d >= datetime.date(2021, 1, 1):
                pred = model_regional.get_prediction(start=d, end=f)
            else:
                pred = model_regional.get_prediction(start=pd.to_datetime(start_date), end=f)
            pred_mean = pred.predicted_mean
            pred_ci = pred.conf_int()

            # Visualisation
            plt.figure(figsize=(15, 8))
            if d < datetime.date(2024, 9, 1):
                filtered_conso = df_region[(df_region.index > pd.to_datetime(d))]
                plt.plot(filtered_conso, label='Donn√©es r√©elles')
            plt.plot(pred_mean, color="orange", label='Pr√©dictions')
            plt.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color='grey', alpha=0.2, label='Intervalle de confiance')
            if d <= datetime.date(2021, 1, 1):
                plt.axvline(x=pd.to_datetime(start_date), color='red', linestyle='--', label='Date de d√©but des pr√©dictions')
            plt.legend()
            plt.grid(True)
            plt.title(f'Pr√©dictions de la consommation √©lectrique (MW) pour la r√©gion {region_selection}')
            st.pyplot(plt)
            
            predicted_consumption = pred_mean.to_frame()
            predicted_consumption = predicted_consumption.rename(columns = {'predicted_mean' : 'Consommation (MW)'})
            
            if d < datetime.date(2024, 9, 1):
                res = pd.concat([filtered_conso, predicted_consumption[predicted_consumption.index > pd.to_datetime('2024-09-01')]])

            else:
                res = predicted_consumption[predicted_consumption.index > pd.to_datetime('2024-09-01')]
            res = pd.concat([res, pred_ci], axis = 1)
            
            st.dataframe(res)

            image_path = image_paths.get(region_code)
            if image_path:
                st.image(image_path)
            
                
        else:
            st.write("Aucun mod√®le trouv√© pour cette r√©gion.")


