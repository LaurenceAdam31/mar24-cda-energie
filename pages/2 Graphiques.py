import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from utils import import_data as imda

# CONFIG DE LA PAGE --> AVEC FAVICON
st.set_page_config(page_title="Projet Energie", page_icon="üåü", layout="wide")

# Appliquer les styles
imda.apply_styles()

# IMPORTATION DU DATASET df_energie
df_energie = imda.get_df_energie()  

# MODIFICATION DES DONN√âES
df_conso_prod = imda.get_df_conso_prod()  # R√©cup√©rer les donn√©es agr√©g√©es

# SIDEBAR A GAUCHE CLASSIQUE
st.sidebar.title("Graphiques")
pages = ["Visualisation Nationale", "Visualisation R√©gionale"]
page = st.sidebar.radio("Aller vers", pages)

# SWITCH SUR LA PAGE DE VISUALISATION
if page == "Visualisation Nationale":
    st.markdown('<h2 class="custom-title">Visualisation Nationale</h2>', unsafe_allow_html=True)
    # Appeler les fonctions de visualisation pour la page nationale
    imda.data_2021(df_energie)  # Visualisation des donn√©es de 2021
    imda.data_nationale(df_energie)  # Visualisation nationale

elif page == "Visualisation R√©gionale":
    st.markdown('<h2 class="custom-title">Visualisation R√©gionale</h2>', unsafe_allow_html=True)
    # st.write("Section de mod√©lisation :")
    # Titre pour "√âtude au niveau R√©gional" avec style personnalis√©
    st.markdown('<p class="medium-font"><b>√âtude au niveau R√©gional</b></p>', unsafe_allow_html=True)

    # Analyse de la consommation d'√©nergie par r√©gion
    st.markdown("""
    <p class='medium-font'><b>Analyse de la consommation d'√©nergie par r√©gion (2015 - 2024) :</b></p>
    """, unsafe_allow_html=True)

                
    # IMPORTATION DU DATASET df_energie
    df_energie = imda.get_df_energie()  

    # Filtrer les donn√©es √† partir de l'ann√©e 2015
    df_anim = df_energie[df_energie["Annee"] > 2014].sort_values(by="Annee")

    # D√©finir une couleur sp√©cifique pour chaque r√©gion
    couleurs_regions = {
        '√éle-de-France': '#1f77b4',   # Bleu
        'Auvergne-Rh√¥ne-Alpes': '#ff7f0e',   # Orange
        'Provence-Alpes-C√¥te d\'Azur': '#2ca02c',   # Vert
        'Bretagne': '#d62728',   # Rouge
        'Normandie': '#9467bd',   # Violet
        'Nouvelle-Aquitaine': '#8c564b',   # Marron
        'Occitanie': '#e377c2',   # Rose
        'Pays de la Loire': '#7f7f7f',   # Gris
        'Hauts-de-France': '#bcbd22',   # Vert clair
        'Grand Est': '#17becf',   # Bleu clair
        'Centre-Val de Loire': '#ffbb78',   # Jaune fonc√©
        'Bourgogne-Franche-Comt√©': '#f7b6d2'  # Rose clair
    }

    # Cr√©ation du graphique de bo√Ætes anim√©es avec Plotly
    fig = px.box(df_anim,
                x="R√©gion",
                y="Consommation (MW)",
                animation_frame="Annee",
                range_y=[0, 20000],
                color="R√©gion",  # Utilisation de la colonne 'R√©gion' pour la coloration
                color_discrete_map=couleurs_regions  # Application de la carte de couleur
                )

    # Mise √† jour de la mise en page
    fig.update_layout(
        title="Consommation d'√©nergie par r√©gion de 2015 √† 2024",
        xaxis_title="R√©gion",
        yaxis_title="Consommation (MW)"
    )

    # Int√©gration du graphique dans Streamlit
    st.plotly_chart(fig)

# # Afficher des boutons interactifs pour explorer le dataset
# if st.button("Afficher les premi√®res lignes du dataset d'√©nergie"):
#     st.dataframe(df_energie.head())

# if st.button("Afficher les derni√®res lignes du dataset d'√©nergie"):
#     st.dataframe(df_energie.tail())

# if st.button("Afficher les colonnes du dataset d'√©nergie"):
#     st.write(df_energie.columns)

# if st.button("Afficher les colonnes et types du dataset d'√©nergie"):
#     st.write(df_energie.dtypes)
